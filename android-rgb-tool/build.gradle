apply plugin: 'com.android.application'

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode 13
        versionName "2.0.0-SNAPSHOT"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    //noinspection GroovyAssignabilityCheck
    if (project.hasProperty("RGBTool.signing.properties")
            && new File(project.property("RGBTool.signing.properties")).exists()) {

        Properties props = new Properties()
        props.load(new FileInputStream(file(project.property("RGBTool.signing.properties"))))

        signingConfigs {
            release {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keyAlias']
                keyPassword props['keyPassword']
            }
        }

        buildTypes {
            release {
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
                signingConfig signingConfigs.release
            }
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {
    def globalConfiguration = rootProject.extensions.getByName("ext")
    def appDependencies = globalConfiguration.appDependencies
    def appTestDependencies = globalConfiguration.appTestDependencies
    def appAndroidTestDependencies = globalConfiguration.appAndroidTestDependencies

    compile appDependencies.appCompat
    compile appDependencies.constraintLayout
    compile appDependencies.cardView
    compile appDependencies.recyclerView
    compile appDependencies.palette
    compile appDependencies.design
    compile appDependencies.customTabs
    compile appDependencies.percent
    compile appDependencies.photoView
    compile appDependencies.picasso
    compile appDependencies.butterKnife
    annotationProcessor appDependencies.butterKnifeCompiler
    compile appDependencies.eventBus
    compile appDependencies.rxAndroid
    compile appDependencies.timber
    compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    compile project(':model')

    // Testing dependencies
    testCompile appTestDependencies.jUnit
    testCompile appTestDependencies.mockito
    androidTestCompile appAndroidTestDependencies.espressoCore
    androidTestCompile appAndroidTestDependencies.testRunner
    androidTestCompile appAndroidTestDependencies.testRules
    androidTestCompile appAndroidTestDependencies.supportAnnotation
}

tasks.matching {it instanceof Test}.all {
    testLogging.events = ["failed", "passed", "skipped"]
}
